<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Key Concepts on Adrestia User-Guide</title><link>https://input-output-hk.github.io/adrestia/docs/key-concepts/</link><description>Recent content in Key Concepts on Adrestia User-Guide</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://input-output-hk.github.io/adrestia/docs/key-concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>UTxO</title><link>https://input-output-hk.github.io/adrestia/docs/key-concepts/utxo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://input-output-hk.github.io/adrestia/docs/key-concepts/utxo/</guid><description>UTxO In a UTxO-based blockchain, a Transaction is a binding between inputs and outputs.
input #1 &amp;gt;---* *---&amp;gt; output #1 \ / input #2 &amp;gt;---*--------* / \ input #3 &amp;gt;---* *---&amp;gt; output #2 In a standard payment, outputs are a combination of:
A value A reference (a.k.a address, a &amp;ldquo;proof&amp;rdquo; of ownership telling who owns the output). input #1 &amp;gt;---* *---&amp;gt; (123, DdzFFzCqr...) \ / input #2 &amp;gt;---*--------* / \ input #3 &amp;gt;---* *---&amp;gt; (456, hswdEoQCp.</description></item><item><title>HD Wallets</title><link>https://input-output-hk.github.io/adrestia/docs/key-concepts/hierarchical-deterministic-wallets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://input-output-hk.github.io/adrestia/docs/key-concepts/hierarchical-deterministic-wallets/</guid><description>Recovery Phrases Motivation We define a way for easily entering and writing down arbitrary binary seeds using a simple dictionary of known words (available in many different languages).
The motivation here is to have sentence of words easy to read and write for humans, which map uniquely back and forth to a sized binary data (harder to remember).
Encoding The process describing how to encode recovery phrases is described in BIP-0039 section &amp;ldquo;Generating the mnemonic&amp;rdquo;.</description></item><item><title>Addresses Format (Byron)</title><link>https://input-output-hk.github.io/adrestia/docs/key-concepts/addresses-byron/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://input-output-hk.github.io/adrestia/docs/key-concepts/addresses-byron/</guid><description>Internal Structure +-------------------------------------------------------------------------------+ | | | CBOR-Serialized Object with CRC¹ | | | +-------------------------------------------------------------------------------+ | | v +-------------------------------------------------------------------------------+ | Address Root | Address Attributes | AddrType | | | | | | Hash (224 bits) | Der. Path² + Stake + NM | PubKey | (Script) | Redeem | | | (open for extension) | (open for extension) | +-------------------------------------------------------------------------------+ | | | | +----------------------------------+ v | | Derivation Path | +---------------------------+ |----&amp;gt;| | | SHA3-256 | | | ChaChaPoly⁴ AccountIx/AddressIx | | |&amp;gt; Blake2b 224 | | +----------------------------------+ | |&amp;gt; CBOR | | | | | | -AddrType | | +----------------------------------+ | -ASD³ (~AddrType+PubKey) | | | Stake Distribution | | -Address Attributes | | | | +---------------------------+ |----&amp;gt;| BootstrapEra | (Single | Multi) | | +----------------------------------+ | | | +----------------------------------+ | | Network Magic | |----&amp;gt;| | | Addr Discr: MainNet vs TestNet | +----------------------------------+ CRC: Cyclic Redundancy Check; sort of checksum, a bit (pun intended) more reliable.</description></item></channel></rss>